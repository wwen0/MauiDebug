com/sas/ia/android/sdk/AbstractAd = Com.Sas.IA.Android.Sdk.AbstractAd
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  benignDelegate = BenignDelegate
  delegate = Delegate
  mraidView = MraidView
  getActionActivity()Landroid/app/Activity; = ActionActivity
  isActionInBrowser()Z = ActionInBrowser
  setActionInBrowser(Z)V = ActionInBrowser
  getDelegate()Lcom/sas/ia/android/sdk/AdDelegate; = Delegate
  setDelegate(Lcom/sas/ia/android/sdk/AdDelegate;)V = Delegate
  isActionInProgress()Z = IsActionInProgress
  isDefaultLoaded()Z = IsDefaultLoaded
  isLoaded()Z = IsLoaded
  getParentActivity()Landroid/app/Activity; = ParentActivity
  getWebView()Landroid/webkit/WebView; = WebView
  cancelAction()V = CancelAction()
  close()V = Close()
  closeView()V = CloseView()
  executeJavaScript(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = ExecuteJavaScript(string, string)
  fcid()Ljava/lang/Integer; = Fcid()
  handleError(Lcom/sas/mkt/mobile/sdk/server/MidtierServicesException;Lcom/sas/ia/android/sdk/AbstractAd;Ljava/lang/String;)V = HandleError(Com.Sas.Mkt.Mobile.Sdk.Server.MidtierServicesException, Com.Sas.IA.Android.Sdk.AbstractAd, string)
  load(Lcom/sas/ia/android/sdk/AdRequest;)V = Load(Com.Sas.IA.Android.Sdk.AdRequest)
  onVisibilityChange(Z)V = OnVisibilityChange(bool)
  processAdHTML(Ljava/lang/String;)Lcom/sas/ia/android/sdk/TagProcessResult; = ProcessAdHTML(string)
  setScale(I)V = SetScale(int)
  useCustomClose(Z)V = UseCustomClose(bool)
  useLocalResources(Z)V = UseLocalResources(bool)
  useLocalResources(ZLjava/lang/String;)V = UseLocalResources(bool, string)
com/sas/ia/android/sdk/Ad = Com.Sas.IA.Android.Sdk.Ad
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  getView()Landroid/view/View; = View
com/sas/ia/android/sdk/AdDelegate = Com.Sas.IA.Android.Sdk.AdDelegate
  <init>()V = .ctor()
  onActionFinished(Lcom/sas/ia/android/sdk/AbstractAd;)V = OnActionFinished(Com.Sas.IA.Android.Sdk.AbstractAd)
  onClosed(Lcom/sas/ia/android/sdk/AbstractAd;)V = OnClosed(Com.Sas.IA.Android.Sdk.AbstractAd)
  onDefaultLoaded(Lcom/sas/ia/android/sdk/AbstractAd;)V = OnDefaultLoaded(Com.Sas.IA.Android.Sdk.AbstractAd)
  onExpandFinished(Lcom/sas/ia/android/sdk/AbstractAd;)V = OnExpandFinished(Com.Sas.IA.Android.Sdk.AbstractAd)
  onLoaded(Lcom/sas/ia/android/sdk/AbstractAd;)V = OnLoaded(Com.Sas.IA.Android.Sdk.AbstractAd)
  onLoadFailed(Lcom/sas/ia/android/sdk/AbstractAd;ILjava/lang/String;Ljava/lang/String;)V = OnLoadFailed(Com.Sas.IA.Android.Sdk.AbstractAd, int, string, string)
  onResizeFinished(Lcom/sas/ia/android/sdk/AbstractAd;)V = OnResizeFinished(Com.Sas.IA.Android.Sdk.AbstractAd)
  willBeginAction(Lcom/sas/ia/android/sdk/AbstractAd;Ljava/lang/String;)Z = WillBeginAction(Com.Sas.IA.Android.Sdk.AbstractAd, string)
  willClose(Lcom/sas/ia/android/sdk/AbstractAd;)Z = WillClose(Com.Sas.IA.Android.Sdk.AbstractAd)
  willExpand(Lcom/sas/ia/android/sdk/AbstractAd;Ljava/lang/String;)Z = WillExpand(Com.Sas.IA.Android.Sdk.AbstractAd, string)
  willResize(Lcom/sas/ia/android/sdk/AbstractAd;Landroid/graphics/Rect;)Z = WillResize(Com.Sas.IA.Android.Sdk.AbstractAd, Android.Graphics.Rect)
com/sas/ia/android/sdk/AdRequest = Com.Sas.IA.Android.Sdk.AdRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V = .ctor(string, string, System.Collections.Generic.IDictionary<string, string>)
  <init>(Ljava/lang/String;Ljava/util/Map;)V = .ctor(string, System.Collections.Generic.IDictionary<string, string>)
  <init>(Ljava/util/Map;)V = .ctor(System.Collections.Generic.IDictionary<string, string>)
  customerId = CustomerId
  domain = Domain
com/sas/ia/android/sdk/ContentLoadingTask = Com.Sas.IA.Android.Sdk.ContentLoadingTask
  <init>(Ljava/lang/String;Ljava/lang/String;Lcom/sas/ia/android/sdk/ContentLoadingTask$ContentLoadingListener;)V = .ctor(string, string, Com.Sas.IA.Android.Sdk.ContentLoadingTask.IContentLoadingListener)
  cancel()V = Cancel()
  onPostExecute(Lcom/sas/ia/android/sdk/ContentLoadingTask$Result;)V = OnPostExecute(Com.Sas.IA.Android.Sdk.ContentLoadingTask.Result)
  run()V = Run()
com/sas/ia/android/sdk/DisplayHelper = Com.Sas.IA.Android.Sdk.DisplayHelper
  appRect()Landroid/graphics/Rect; = AppRect()
  dipsToPixels(Landroid/graphics/Rect;)Landroid/graphics/Rect; = DipsToPixels(Android.Graphics.Rect)
  dipsToPixels(I)I = DipsToPixels(int)
  pixelsToDips(Landroid/graphics/Rect;)Landroid/graphics/Rect; = PixelsToDips(Android.Graphics.Rect)
  pixelsToDips(I)I = PixelsToDips(int)
  screenRect()Landroid/graphics/Rect; = ScreenRect()
  topView()Landroid/view/ViewGroup; = TopView()
  viewRect(Landroid/view/View;)Landroid/graphics/Rect; = ViewRect(Android.Views.View)
com/sas/ia/android/sdk/Honeycomb = Com.Sas.IA.Android.Sdk.Honeycomb
  <init>()V = .ctor()
  running()Z = Running()
  setLoadWithOverviewMode(Landroid/webkit/WebView;)V = SetLoadWithOverviewMode(Android.Webkit.WebView)
  setViewAlpha(Landroid/view/View;F)V = SetViewAlpha(Android.Views.View, float)
  showActionBar(Landroid/app/Activity;Z)Z = ShowActionBar(Android.App.Activity, bool)
com/sas/ia/android/sdk/HoneycombProxy = Com.Sas.IA.Android.Sdk.HoneycombProxy
  <init>()V = .ctor()
  setLoadWithOverviewMode(Landroid/webkit/WebView;)V = SetLoadWithOverviewMode(Android.Webkit.WebView)
  setViewAlpha(Landroid/view/View;F)V = SetViewAlpha(Android.Views.View, float)
  showActionBar(Landroid/app/Activity;Z)Z = ShowActionBar(Android.App.Activity, bool)
com/sas/ia/android/sdk/Interstitial = Com.Sas.IA.Android.Sdk.Interstitial
  <init>(Landroid/view/View;Landroid/content/Context;Ljava/lang/Object;Lcom/sas/ia/android/sdk/Interstitial$Delegate;)V = .ctor(Android.Views.View, Android.Content.Context, Java.Lang.Object, Com.Sas.IA.Android.Sdk.Interstitial.IDelegate)
  benignDelegate = BenignDelegate
  delegate = Delegate
  layoutRect = LayoutRect
  orientation = Orientation
  strongReference = StrongReference
  subView = SubView
  usesCloseArea = UsesCloseArea
  usesCloseIcon = UsesCloseIcon
  view = View
  getActivity()Landroid/app/Activity; = Activity
  getDelegate()Lcom/sas/ia/android/sdk/Interstitial$Delegate; = Delegate
  isFullScreen()Z = IsFullScreen
  getView()Landroid/view/View; = View
  close()V = Close()
  doClose()V = DoClose()
  onConfigurationChanged(Landroid/content/res/Configuration;)V = OnConfigurationChanged(Android.Content.Res.Configuration)
  onDestroy()V = OnDestroy()
  onOpen(Lcom/sas/ia/android/sdk/InterstitialActivity;)V = OnOpen(Com.Sas.IA.Android.Sdk.InterstitialActivity)
  onVisibilityChange(Z)V = OnVisibilityChange(bool)
  setCloseImage()V = SetCloseImage()
  setOrientation(I)V = SetOrientation(int)
  setUsesCloseIcon(Z)V = SetUsesCloseIcon(bool)
  show()V = Show()
com/sas/ia/android/sdk/InterstitialActivity = Com.Sas.IA.Android.Sdk.InterstitialActivity
  <init>()V = .ctor()
  interstitial = Interstitial
com/sas/ia/android/sdk/InterstitialAd = Com.Sas.IA.Android.Sdk.InterstitialAd
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  show()V = Show()
com/sas/ia/android/sdk/InterstitialWebActivity = Com.Sas.IA.Android.Sdk.InterstitialWebActivity
  <init>()V = .ctor()
com/sas/ia/android/sdk/InterstitialWebBrowser = Com.Sas.IA.Android.Sdk.InterstitialWebBrowser
  <init>()V = .ctor()
  getUrl()Ljava/lang/String; = Url
  close()V = Close()
  onClose()V = OnClose()
  onOpen(Lcom/sas/ia/android/sdk/InterstitialWebActivity;)V = OnOpen(Com.Sas.IA.Android.Sdk.InterstitialWebActivity)
  show(Landroid/content/Context;Ljava/lang/String;Lcom/sas/ia/android/sdk/InterstitialWebBrowser$Delegate;)V = Show(Android.Content.Context, string, Com.Sas.IA.Android.Sdk.InterstitialWebBrowser.IDelegate)
com/sas/ia/android/sdk/LaggingActivity = Com.Sas.IA.Android.Sdk.LaggingActivity
  <init>()V = .ctor()
  softDestroy = SoftDestroy
  onCreate(Landroid/os/Bundle;)V = OnCreate(Android.OS.Bundle)
  onSaveInstanceState(Landroid/os/Bundle;)V = OnSaveInstanceState(Android.OS.Bundle)
  start(Landroid/content/Context;Ljava/lang/Class;Ljava/lang/Object;)V = Start(Android.Content.Context, Java.Lang.Class, Java.Lang.Object)
com/sas/ia/android/sdk/MRAIDWebView = Com.Sas.IA.Android.Sdk.MRAIDWebView
  <init>(Landroid/content/Context;Lcom/sas/ia/android/sdk/MRAIDWebView$Delegate;)V = .ctor(Android.Content.Context, Com.Sas.IA.Android.Sdk.MRAIDWebView.IDelegate)
  benignDelegate = BenignDelegate
  delegate = Delegate
  displayHelper = DisplayHelper
  innerHTML = InnerHTML
  isInterstitial = IsInterstitial
  mraidLoaded = MraidLoaded
  mraidTracing = MraidTracing
  numTraces = NumTraces
  parentActivity = ParentActivity
  supportCalendar = SupportCalendar
  supportPicture = SupportPicture
  supportSMSText = SupportSMSText
  supportTelephone = SupportTelephone
  uiHandler = UiHandler
  visible = Visible
  webView = WebView
  getActionActivity()Landroid/app/Activity; = ActionActivity
  isActionInBrowser()Z = ActionInBrowser
  setActionInBrowser(Z)V = ActionInBrowser
  getActivity()Landroid/app/Activity; = Activity
  getDelegate()Lcom/sas/ia/android/sdk/MRAIDWebView$Delegate; = Delegate
  isActionInProgress()Z = IsActionInProgress
  isWebViewInContainer()Z = IsWebViewInContainer
  cancelAction()V = CancelAction()
  close()V = Close()
  executeJavaScript(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = ExecuteJavaScript(string, string)
  expand(Ljava/lang/String;)V = Expand(string)
  htmlContent()Ljava/lang/String; = HtmlContent()
  load(Ljava/lang/String;)V = Load(string)
  loadChildExpansion(Ljava/lang/String;Landroid/app/Activity;)V = LoadChildExpansion(string, Android.App.Activity)
  mraidAdTrace(Ljava/lang/String;)V = MraidAdTrace(string)
  mraidError(Ljava/lang/String;Ljava/lang/String;)V = MraidError(string, string)
  mraidExecute(Ljava/lang/String;)V = MraidExecute(string)
  mraidExecute(Ljava/lang/String;Z)V = MraidExecute(string, bool)
  mraidJsTrace(Ljava/lang/String;)V = MraidJsTrace(string)
  mraidOrient()V = MraidOrient()
  mraidSdkDone()V = MraidSdkDone()
  mraidSdkError(Ljava/lang/String;)V = MraidSdkError(string)
  mraidSdkReady()V = MraidSdkReady()
  mraidSdkTrace(Ljava/lang/String;)V = MraidSdkTrace(string)
  mraidSetDefaultPosition()V = MraidSetDefaultPosition()
  mraidSetPosition()V = MraidSetPosition()
  mraidSetState()V = MraidSetState()
  mraidSetTracing()V = MraidSetTracing()
  mraidSetVisibility()V = MraidSetVisibility()
  mraidTrace(Ljava/lang/String;Ljava/lang/String;)V = MraidTrace(string, string)
  onVisibilityChange(Z)V = OnVisibilityChange(bool)
  open(Ljava/lang/String;)V = Open(string)
  processMraidCommand(Ljava/lang/String;Ljava/util/List;)V = ProcessMraidCommand(string, System.Collections.Generic.IList<string>)
  removeWebViewFromParent()V = RemoveWebViewFromParent()
  resize()V = Resize()
  returnWebViewToContainer(Z)V = ReturnWebViewToContainer(bool)
  setScale(I)V = SetScale(int)
  setupUseLocalResources(ZLjava/lang/String;)V = SetupUseLocalResources(bool, string)
  setUseCustomClose(Z)V = SetUseCustomClose(bool)
  showInterstitially(Landroid/app/Activity;Ljava/lang/Object;)V = ShowInterstitially(Android.App.Activity, Java.Lang.Object)
com/sas/ia/android/sdk/TagProcessResult = Com.Sas.IA.Android.Sdk.TagProcessResult
  contentParseFailure = ContentParseFailure
  noExpectedTags = NoExpectedTags
  noHtmlContent = NoHtmlContent
  success = Success
  valueOf(Ljava/lang/String;)Lcom/sas/ia/android/sdk/TagProcessResult; = ValueOf(string)
  values()[Lcom/sas/ia/android/sdk/TagProcessResult; = Values()
com/sas/mkt/mobile/sdk/ActivityLifecycleListener = Com.Sas.Mkt.Mobile.Sdk.ActivityLifecycleListener
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  getCurrentActivity()Landroid/app/Activity; = CurrentActivity
  ignoreActivityReload()V = IgnoreActivityReload()
  onActivityCreated(Landroid/app/Activity;Landroid/os/Bundle;)V = OnActivityCreated(Android.App.Activity, Android.OS.Bundle)
  onActivityDestroyed(Landroid/app/Activity;)V = OnActivityDestroyed(Android.App.Activity)
  onActivityPaused(Landroid/app/Activity;)V = OnActivityPaused(Android.App.Activity)
  onActivityPostResumed(Landroid/app/Activity;)V = OnActivityPostResumed(Android.App.Activity)
  onActivityResumed(Landroid/app/Activity;)V = OnActivityResumed(Android.App.Activity)
  onActivitySaveInstanceState(Landroid/app/Activity;Landroid/os/Bundle;)V = OnActivitySaveInstanceState(Android.App.Activity, Android.OS.Bundle)
  onActivityStarted(Landroid/app/Activity;)V = OnActivityStarted(Android.App.Activity)
  onActivityStopped(Landroid/app/Activity;)V = OnActivityStopped(Android.App.Activity)
  setCurrentActivity(Landroid/app/Activity;Z)V = SetCurrentActivity(Android.App.Activity, bool)
com/sas/mkt/mobile/sdk/ads/SASCollectorAd = Com.Sas.Mkt.Mobile.Sdk.Ads.SASCollectorAd
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  isFullyVisible()Z = IsFullyVisible
  handleError(Lcom/sas/mkt/mobile/sdk/server/MidtierServicesException;)V = HandleError(Com.Sas.Mkt.Mobile.Sdk.Server.MidtierServicesException)
  handleResult(Ljava/lang/String;)V = HandleResult(string)
  load(Ljava/lang/String;Ljava/util/Map;)V = Load(string, System.Collections.Generic.IDictionary<string, string>)
com/sas/mkt/mobile/sdk/ads/SASCollectorInterstitialAd = Com.Sas.Mkt.Mobile.Sdk.Ads.SASCollectorInterstitialAd
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  isFullyVisible()Z = IsFullyVisible
  handleError(Lcom/sas/mkt/mobile/sdk/server/MidtierServicesException;)V = HandleError(Com.Sas.Mkt.Mobile.Sdk.Server.MidtierServicesException)
  handleResult(Ljava/lang/String;)V = HandleResult(string)
  load(Ljava/lang/String;Ljava/util/Map;)V = Load(string, System.Collections.Generic.IDictionary<string, string>)
com/sas/mkt/mobile/sdk/BuildConfig = Com.Sas.Mkt.Mobile.Sdk.BuildConfig
  <init>()V = .ctor()
  BUILD_TYPE = BuildType
  DEBUG = Debug
  LIBRARY_PACKAGE_NAME = LibraryPackageName
com/sas/mkt/mobile/sdk/BuildInfo = Com.Sas.Mkt.Mobile.Sdk.BuildInfo
  <init>()V = .ctor()
  VERSION = Version
com/sas/mkt/mobile/sdk/database/EventsDataSource = Com.Sas.Mkt.Mobile.Sdk.Database.EventsDataSource
  getAllEvents()Ljava/util/List; = AllEvents
  getInstance()Lcom/sas/mkt/mobile/sdk/database/EventsDataSource; = Instance
  getRecentEvents()Ljava/util/List; = RecentEvents
  addEvent(Lcom/sas/mkt/mobile/sdk/domain/MobileEvent;)J = AddEvent(Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent)
  addEvents(Ljava/util/List;)V = AddEvents(System.Collections.Generic.IList<Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent>)
  close()V = Close()
  deleteAll()V = DeleteAll()
  deleteOlderEvents(Ljava/util/Date;)V = DeleteOlderEvents(Java.Util.Date)
  initialize(Landroid/content/Context;)Lcom/sas/mkt/mobile/sdk/database/EventsDataSource; = Initialize(Android.Content.Context)
  open()V = Open()
com/sas/mkt/mobile/sdk/database/EventsSQLiteHelper = Com.Sas.Mkt.Mobile.Sdk.Database.EventsSQLiteHelper
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  COLUMN_DATETIME = ColumnDatetime
  COLUMN_OBJECTJSON = ColumnObjectjson
  DATABASE_TABLE = DatabaseTable
  onCreate(Landroid/database/sqlite/SQLiteDatabase;)V = OnCreate(Android.Database.Sqlite.SQLiteDatabase)
  onUpgrade(Landroid/database/sqlite/SQLiteDatabase;II)V = OnUpgrade(Android.Database.Sqlite.SQLiteDatabase, int, int)
com/sas/mkt/mobile/sdk/DeviceAndApplicationInfoHelper = Com.Sas.Mkt.Mobile.Sdk.DeviceAndApplicationInfoHelper
  <init>()V = .ctor()
  getDevicePlatform()Ljava/lang/String; = DevicePlatform
  buildDeviceInfo(Landroid/content/Context;)Ljava/util/Map; = BuildDeviceInfo(Android.Content.Context)
com/sas/mkt/mobile/sdk/domain/AdRequestRedirect = Com.Sas.Mkt.Mobile.Sdk.Domain.AdRequestRedirect
  <init>()V = .ctor()
  getUrl()Ljava/lang/String; = Url
  setUrl(Ljava/lang/String;)V = Url
com/sas/mkt/mobile/sdk/domain/AppEnvironment = Com.Sas.Mkt.Mobile.Sdk.Domain.AppEnvironment
  TAG = Tag
  hasGSONAvailable()Z = HasGSONAvailable
  hasInternetPermissions()Z = HasInternetPermissions
  hasJetpackFragments()Z = HasJetpackFragments
  hasPlayServices()Z = HasPlayServices
  hasSDKIntentService()Z = HasSDKIntentService
  initialize(Landroid/content/Context;)Lcom/sas/mkt/mobile/sdk/domain/AppEnvironment; = Initialize(Android.Content.Context)
com/sas/mkt/mobile/sdk/domain/ErrorData = Com.Sas.Mkt.Mobile.Sdk.Domain.ErrorData
  <init>()V = .ctor()
  getCode()I = Code
  setCode(I)V = Code
  getDetailedMessage()Ljava/lang/String; = DetailedMessage
  setDetailedMessage(Ljava/lang/String;)V = DetailedMessage
  getMessage()Ljava/lang/String; = Message
  setMessage(Ljava/lang/String;)V = Message
com/sas/mkt/mobile/sdk/domain/EventList = Com.Sas.Mkt.Mobile.Sdk.Domain.EventList
  <init>()V = .ctor()
com/sas/mkt/mobile/sdk/domain/GeofenceContainer = Com.Sas.Mkt.Mobile.Sdk.Domain.GeofenceContainer
  <init>()V = .ctor()
  getBoundingRegion()Lcom/sas/mkt/mobile/sdk/domain/SimpleGeofence; = BoundingRegion
  setBoundingRegion(Lcom/sas/mkt/mobile/sdk/domain/SimpleGeofence;)V = BoundingRegion
  getRegions()[Lcom/sas/mkt/mobile/sdk/domain/SimpleGeofence; = GetRegions()
  setRegions([Lcom/sas/mkt/mobile/sdk/domain/SimpleGeofence;)V = SetRegions(Com.Sas.Mkt.Mobile.Sdk.Domain.SimpleGeofence[])
com/sas/mkt/mobile/sdk/domain/IdentityData = Com.Sas.Mkt.Mobile.Sdk.Domain.IdentityData
  <init>()V = .ctor()
  getAppId()Ljava/lang/String; = AppId
  setAppId(Ljava/lang/String;)V = AppId
  getLoadId()Ljava/lang/String; = LoadId
  setLoadId(Ljava/lang/String;)V = LoadId
  getType()Ljava/lang/String; = Type
  setType(Ljava/lang/String;)V = Type
  getValue()Ljava/lang/String; = Value
  setValue(Ljava/lang/String;)V = Value
  getVariables()Ljava/util/Map; = Variables
  setVariables(Ljava/util/Map;)V = Variables
com/sas/mkt/mobile/sdk/domain/MobileEvent = Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent
  <init>()V = .ctor()
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;ILjava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, Java.Util.Date, int, string, string)
  getAppId()Ljava/lang/String; = AppId
  setAppId(Ljava/lang/String;)V = AppId
  getDeviceId()Ljava/lang/String; = DeviceId
  setDeviceId(Ljava/lang/String;)V = DeviceId
  getEventAttributes()Ljava/util/Map; = EventAttributes
  setEventAttributes(Ljava/util/Map;)V = EventAttributes
  getEventDateTime()Ljava/util/Date; = EventDateTime
  setEventDateTime(Ljava/util/Date;)V = EventDateTime
  getEventType()Ljava/lang/String; = EventType
  setEventType(Ljava/lang/String;)V = EventType
  getLoadId()Ljava/lang/String; = LoadId
  setLoadId(Ljava/lang/String;)V = LoadId
  getSessionId()Ljava/lang/String; = SessionId
  setSessionId(Ljava/lang/String;)V = SessionId
  getcsi()J = Getcsi()
  getEventDetail(Ljava/lang/String;)Ljava/lang/String; = GetEventDetail(string)
  getSessionIndicator()Lcom/sas/mkt/mobile/sdk/domain/MobileEvent$SessionIndicator; = GetSessionIndicator()
  setcsi(J)V = Setcsi(long)
  setSessionIndicator(Lcom/sas/mkt/mobile/sdk/domain/MobileEvent$SessionIndicator;)V = SetSessionIndicator(Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent.SessionIndicator)
com/sas/mkt/mobile/sdk/domain/PushData = Com.Sas.Mkt.Mobile.Sdk.Domain.PushData
  <init>()V = .ctor()
  actions = Actions
  constrainWidths = ConstrainWidths
  content = Content
  creativeId = CreativeId
  dismissEvent = DismissEvent
  eventId = EventId
  placement = Placement
  taskId = TaskId
  template = Template
com/sas/mkt/mobile/sdk/domain/SessionData = Com.Sas.Mkt.Mobile.Sdk.Domain.SessionData
  <init>()V = .ctor()
  sessionMax = SessionMax
  sessionTimeout = SessionTimeout
  getCurrentCSI()J = CurrentCSI
  setCurrentCSI(J)V = CurrentCSI
  getCurrentLoadId()Ljava/lang/String; = CurrentLoadId
  setCurrentLoadId(Ljava/lang/String;)V = CurrentLoadId
  getCurrentSessionId()Ljava/lang/String; = CurrentSessionId
  setCurrentSessionId(Ljava/lang/String;)V = CurrentSessionId
  getDeviceIdSeed()I = DeviceIdSeed
  setDeviceIdSeed(I)V = DeviceIdSeed
  isFirstSession()Z = FirstSession
  setFirstSession(Z)V = FirstSession
  getLastDeviceId()Ljava/lang/String; = LastDeviceId
  setLastDeviceId(Ljava/lang/String;)V = LastDeviceId
  getLastEvent()J = LastEvent
  setLastEvent(J)V = LastEvent
  getLastLoadUri()Ljava/lang/String; = LastLoadUri
  setLastLoadUri(Ljava/lang/String;)V = LastLoadUri
  getLastNewSession()J = LastNewSession
  setLastNewSession(J)V = LastNewSession
  clear()V = Clear()
  clearLastIdentity()V = ClearLastIdentity()
  identityUnchanged(Ljava/lang/String;Ljava/lang/String;)Z = IdentityUnchanged(string, string)
  isSessionTimeout(J)Z = IsSessionTimeout(long)
  setLastIdentity(Ljava/lang/String;Ljava/lang/String;)V = SetLastIdentity(string, string)
com/sas/mkt/mobile/sdk/domain/SimpleBeacon = Com.Sas.Mkt.Mobile.Sdk.Domain.SimpleBeacon
  <init>()V = .ctor()
  getBeaconUUID()Ljava/lang/String; = BeaconUUID
  setBeaconUUID(Ljava/lang/String;)V = BeaconUUID
  getMajor()S = Major
  setMajor(S)V = Major
  getMinor()S = Minor
  setMinor(S)V = Minor
com/sas/mkt/mobile/sdk/domain/SimpleGeofence = Com.Sas.Mkt.Mobile.Sdk.Domain.SimpleGeofence
  <init>()V = .ctor()
  <init>(Ljava/lang/String;DDF)V = .ctor(string, double, double, float)
  getBeacons()Ljava/util/List; = Beacons
  setBeacons(Ljava/util/List;)V = Beacons
  getId()Ljava/lang/String; = Id
  setId(Ljava/lang/String;)V = Id
  getLatitude()D = Latitude
  setLatitude(D)V = Latitude
  getLongitude()D = Longitude
  setLongitude(D)V = Longitude
  getRadius()F = Radius
  setRadius(F)V = Radius
com/sas/mkt/mobile/sdk/domain/TokenData = Com.Sas.Mkt.Mobile.Sdk.Domain.TokenData
  <init>()V = .ctor()
  getAppId()Ljava/lang/String; = AppId
  setAppId(Ljava/lang/String;)V = AppId
  getDeviceId()Ljava/lang/String; = DeviceId
  setDeviceId(Ljava/lang/String;)V = DeviceId
  getToken()Ljava/lang/String; = Token
  setToken(Ljava/lang/String;)V = Token
com/sas/mkt/mobile/sdk/domain/VersionedAPIData = Com.Sas.Mkt.Mobile.Sdk.Domain.IVersionedAPIData
  contentType()Ljava/lang/String; = ContentType()
com/sas/mkt/mobile/sdk/id/IDProvider = Com.Sas.Mkt.Mobile.Sdk.ID.IDProvider
  generateID()Ljava/lang/String; = GenerateID()
com/sas/mkt/mobile/sdk/id/UUIDProvider = Com.Sas.Mkt.Mobile.Sdk.ID.UUIDProvider
  <init>()V = .ctor()
  generateID()Ljava/lang/String; = GenerateID()
com/sas/mkt/mobile/sdk/InternalSingleton = Com.Sas.Mkt.Mobile.Sdk.InternalSingleton
  PROPERTY_KEY_GEOFENCE_RESPONSIVENESS = PropertyKeyGeofenceResponsiveness
  RUNTIME_VERSION_MIN = RuntimeVersionMin
  getAppEnvironment()Lcom/sas/mkt/mobile/sdk/domain/AppEnvironment; = AppEnvironment
  getApplication()Landroid/app/Application; = Application
  getCommonExecutor()Lcom/sas/mkt/mobile/sdk/tasks/SASCollectorExecutor; = CommonExecutor
  setCommonExecutor(Lcom/sas/mkt/mobile/sdk/tasks/SASCollectorExecutor;)V = CommonExecutor
  getCurrentActivity()Landroid/app/Activity; = CurrentActivity
  getEventCallback()Lcom/sas/mkt/mobile/sdk/SASCollector$EventCallback; = EventCallback
  getGeofenceCallback()Lcom/sas/mkt/mobile/sdk/SASCollector$GeofenceCallback; = GeofenceCallback
  isAppRelaunchDisabledOnPushOpen()Z = IsAppRelaunchDisabledOnPushOpen
  isConfigurationValid()Z = IsConfigurationValid
  isFocusTrackingDisabled()Z = IsFocusTrackingDisabled
  isUseLocalResourcesForSpots()Z = IsUseLocalResourcesForSpots
  getJsonHandler()Lcom/sas/mkt/mobile/sdk/JsonHandler; = JsonHandler
  getLocalResourcesPathForSpots()Ljava/lang/String; = LocalResourcesPathForSpots
  getLocationMonitoringDisabled()Z = LocationMonitoringDisabled
  getRemoteFilesDir()Ljava/io/File; = RemoteFilesDir
  getRemoteRetries()Ljava/util/List; = RemoteRetries
  setRemoteRetries(Ljava/util/List;)V = RemoteRetries
  getSessionData()Lcom/sas/mkt/mobile/sdk/domain/SessionData; = SessionData
  addAppEventInternal(Lcom/sas/mkt/mobile/sdk/SASCollectorEvent;)V = AddAppEventInternal(Com.Sas.Mkt.Mobile.Sdk.SASCollectorEvent)
  addAppEventInternal(Lcom/sas/mkt/mobile/sdk/SASCollectorEvent;Lcom/sas/mkt/mobile/sdk/domain/MobileEvent$SessionIndicator;)V = AddAppEventInternal(Com.Sas.Mkt.Mobile.Sdk.SASCollectorEvent, Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent.SessionIndicator)
  addAppEventInternal(Ljava/lang/String;Ljava/util/Map;)V = AddAppEventInternal(string, System.Collections.Generic.IDictionary<string, string>)
  addAppEventInternal(Ljava/util/List;Lcom/sas/mkt/mobile/sdk/domain/MobileEvent$SessionIndicator;)V = AddAppEventInternal(System.Collections.Generic.IList<Com.Sas.Mkt.Mobile.Sdk.SASCollectorEvent>, Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent.SessionIndicator)
  checkVersion()Z = CheckVersion()
  disableBeaconScan()V = DisableBeaconScan()
  enableBeaconScan(Ljava/util/List;Ljava/lang/String;)V = EnableBeaconScan(System.Collections.Generic.IList<Com.Sas.Mkt.Mobile.Sdk.Domain.SimpleBeacon>, string)
  exec(Lcom/sas/mkt/mobile/sdk/tasks/BaseSASCollectorTask;)V = Exec(Com.Sas.Mkt.Mobile.Sdk.Tasks.BaseSASCollectorTask)
  get()Lcom/sas/mkt/mobile/sdk/InternalSingleton; = Get()
  getConfigurationOption(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetConfigurationOption(string, string)
  getConfigurationOptionAsInt(Ljava/lang/String;I)I = GetConfigurationOptionAsInt(string, int)
  getIntegerConfigurationOption(Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer; = GetIntegerConfigurationOption(string, Java.Lang.Integer)
  loadConfigurationOptions(Ljava/util/Properties;)V = LoadConfigurationOptions(Java.Util.Properties)
  notifyFocus(Landroid/app/Activity;)V = NotifyFocus(Android.App.Activity)
  runOnUiThread(Ljava/lang/Runnable;)V = RunOnUiThread(Java.Lang.IRunnable)
  setConfigurationOption(Ljava/lang/String;Ljava/lang/String;)V = SetConfigurationOption(string, string)
com/sas/mkt/mobile/sdk/JsonHandler = Com.Sas.Mkt.Mobile.Sdk.JsonHandler
  <init>()V = .ctor()
  fromJson(Ljava/io/Reader;Ljava/lang/reflect/Type;)Ljava/lang/Object; = FromJson(Java.IO.Reader, Java.Lang.Reflect.IType)
  fromJson(Ljava/lang/String;Ljava/lang/reflect/Type;)Ljava/lang/Object; = FromJson(string, Java.Lang.Reflect.IType)
  toJson(Ljava/lang/Object;)Ljava/lang/String; = ToJson(Java.Lang.Object)
  toJson(Ljava/lang/Object;Ljava/io/Writer;)V = ToJson(Java.Lang.Object, Java.IO.Writer)
com/sas/mkt/mobile/sdk/loc/GeofenceManager = Com.Sas.Mkt.Mobile.Sdk.Loc.GeofenceManager
  <init>()V = .ctor()
  TAG = Tag
  clearGeofences(Landroid/content/Context;)V = ClearGeofences(Android.Content.Context)
  getBeaconsForGeofence(Landroid/content/Context;Ljava/lang/String;)Ljava/util/List; = GetBeaconsForGeofence(Android.Content.Context, string)
  restoreGeofences(Landroid/content/Context;)V = RestoreGeofences(Android.Content.Context)
  setGeofences(Landroid/content/Context;[Lcom/sas/mkt/mobile/sdk/domain/SimpleGeofence;)V = SetGeofences(Android.Content.Context, Com.Sas.Mkt.Mobile.Sdk.Domain.SimpleGeofence[])
com/sas/mkt/mobile/sdk/loc/LocationHelper = Com.Sas.Mkt.Mobile.Sdk.Loc.LocationHelper
  <init>()V = .ctor()
  requestLocationUpdate(Landroid/content/Context;)V = RequestLocationUpdate(Android.Content.Context)
  resetState()V = ResetState()
com/sas/mkt/mobile/sdk/MobileEventConstants = Com.Sas.Mkt.Mobile.Sdk.MobileEventConstants
  <init>()V = .ctor()
  DATA_TAG_CREATIVE_ID = DataTagCreativeId
  DATA_TAG_REC_GROUP = DataTagRecGroup
  DATA_TAG_TASK_ID = DataTagTaskId
  DEVICE_TYPE_PHONE = DeviceTypePhone
  DEVICE_TYPE_TABLET = DeviceTypeTablet
  EVT_BEACON_ENTER = EvtBeaconEnter
  EVT_CART = EvtCart
  EVT_DATA_APP_LANGUAGE = EvtDataAppLanguage
  EVT_DATA_APP_VERSION = EvtDataAppVersion
  EVT_DATA_BEACON_MAJOR = EvtDataBeaconMajor
  EVT_DATA_BEACON_MINOR = EvtDataBeaconMinor
  EVT_DATA_BEACON_UUID = EvtDataBeaconUuid
  EVT_DATA_CARRIER_NAME = EvtDataCarrierName
  EVT_DATA_CART_TYPE = EvtDataCartType
  EVT_DATA_CREATIVE_ID = EvtDataCreativeId
  EVT_DATA_DEVICE_LANGUAGE = EvtDataDeviceLanguage
  EVT_DATA_DEVICE_MFG = EvtDataDeviceMfg
  EVT_DATA_DEVICE_MODEL = EvtDataDeviceModel
  EVT_DATA_DEVICE_TYPE = EvtDataDeviceType
  EVT_DATA_EVENT_ID = EvtDataEventId
  EVT_DATA_FCID = EvtDataFcid
  EVT_DATA_FLAG_NEW_LOAD = EvtDataFlagNewLoad
  EVT_DATA_FLAG_NEW_SESSION = EvtDataFlagNewSession
  EVT_DATA_FLAGS = EvtDataFlags
  EVT_DATA_GEOFENCE_REGION = EvtDataGeofenceRegion
  EVT_DATA_IDENTITY_TYPE = EvtDataIdentityType
  EVT_DATA_IDENTITY_VALUE = EvtDataIdentityValue
  EVT_DATA_LATITUDE = EvtDataLatitude
  EVT_DATA_LOAD_URI = EvtDataLoadUri
  EVT_DATA_LONGITUDE = EvtDataLongitude
  EVT_DATA_MOBILE_COUNTRY_CODE = EvtDataMobileCountryCode
  EVT_DATA_MOBILE_NETWORK_CODE = EvtDataMobileNetworkCode
  EVT_DATA_PLATFORM = EvtDataPlatform
  EVT_DATA_PLATFORM_VERSION = EvtDataPlatformVersion
  EVT_DATA_REC_GROUP = EvtDataRecGroup
  EVT_DATA_SCREEN_HEIGHT = EvtDataScreenHeight
  EVT_DATA_SCREEN_WIDTH = EvtDataScreenWidth
  EVT_DATA_SDK_VERSION = EvtDataSdkVersion
  EVT_DATA_SPOT_ID = EvtDataSpotId
  EVT_DATA_TASK_ID = EvtDataTaskId
  EVT_DATA_URI = EvtDataUri
  EVT_DATA_VISITOR_STATE = EvtDataVisitorState
  EVT_DEFOCUS = EvtDefocus
  EVT_ERROR_CODE = EvtErrorCode
  EVT_ERROR_MESSAGE = EvtErrorMessage
  EVT_FOCUS = EvtFocus
  EVT_GEOFENCE_ENTER = EvtGeofenceEnter
  EVT_GEOFENCE_EXIT = EvtGeofenceExit
  EVT_HTML_INVALID = EvtHtmlInvalid
  EVT_IDENTITY = EvtIdentity
  EVT_LOAD = EvtLoad
  EVT_NO_CREATIVEID_OR_TASKID_ERROR = EvtNoCreativeidOrTaskidError
  EVT_NO_HTML_CONTENT = EvtNoHtmlContent
  EVT_SPOT_CLICK_THROUGH = EvtSpotClickThrough
  EVT_SPOT_CLOSED = EvtSpotClosed
  EVT_SPOT_CONTENT_DEFAULT_DELIVERED = EvtSpotContentDefaultDelivered
  EVT_SPOT_CONTENT_DELIVERED = EvtSpotContentDelivered
  EVT_SPOT_CONTENT_FAILED = EvtSpotContentFailed
  EVT_SPOT_CONTENT_REQUESTED = EvtSpotContentRequested
  EVT_SPOT_CONTENT_VIEWABLE = EvtSpotContentViewable
  EVT_SPOT_NOT_FOUND = EvtSpotNotFound
  EVT_STARTUP = EvtStartup
  EVT_UNABLE_TO_LOAD_SPOT = EvtUnableToLoadSpot
  GEOFENCE_INDEX_REGION = GeofenceIndexRegion
  HTTP_CLIENT_AGENT = HttpClientAgent
  IAM_PUSH_NOTIFICATION = IamPushNotification
  IAM_TEMPLATE_LARGE = IamTemplateLarge
  IAM_TEMPLATE_SMALL = IamTemplateSmall
  JSON_DATE_FORMAT = JsonDateFormat
  PLATFORM = Platform
  PROPERTY_KEY_APP_RELAUNCH_DISABLED_ON_NOTIFICATION_OPEN = PropertyKeyAppRelaunchDisabledOnNotificationOpen
  PROPERTY_KEY_DISABLE_FOCUS_TRACKING = PropertyKeyDisableFocusTracking
  PROPERTY_KEY_LOCAL_RESOURCES_PATH_MOBILE_SPOTS = PropertyKeyLocalResourcesPathMobileSpots
  PROPERTY_KEY_MAX_OFFLINE_EVENT_AGE_MINUTES = PropertyKeyMaxOfflineEventAgeMinutes
  PROPERTY_KEY_USE_LOCAL_RESOURCES_MOBILE_SPOTS = PropertyKeyUseLocalResourcesMobileSpots
  PROPERTY_REMOTE_RETRIES = PropertyRemoteRetries
  SHARED_PREFS_KEY_CURRENT_FENCE = SharedPrefsKeyCurrentFence
  SHARED_PREFS_KEY_DEVICE_ID = SharedPrefsKeyDeviceId
  SHARED_PREFS_KEY_FENCES = SharedPrefsKeyFences
  SHARED_PREFS_KEY_FENCES_ENC = SharedPrefsKeyFencesEnc
  SHARED_PREFS_KEY_LOCATION_MONITORING_DISABLED = SharedPrefsKeyLocationMonitoringDisabled
  SHARED_PREFS_KEY_LOCATION_PERMISSION_PROMPT_ENABLE = SharedPrefsKeyLocationPermissionPromptEnable
  SHARED_PREFS_KEY_MOBILE_MESSAGE_ICON_COLOR_RESOURCE = SharedPrefsKeyMobileMessageIconColorResource
  SHARED_PREFS_KEY_MOBILE_MESSAGE_ICON_RESOURCE = SharedPrefsKeyMobileMessageIconResource
  SHARED_PREFS_KEY_PUSH_NOTIFICATION_CHANNEL_ID = SharedPrefsKeyPushNotificationChannelId
  SHARED_PREFS_NAME = SharedPrefsName
  TABLET_MIN_SCREEN_SIZE = TabletMinScreenSize
  VISITOR_STATE_NEW = VisitorStateNew
  VISITOR_STATE_RETURNING = VisitorStateReturning
com/sas/mkt/mobile/sdk/MonitoredApplication = Com.Sas.Mkt.Mobile.Sdk.MonitoredApplication
  <init>()V = .ctor()
com/sas/mkt/mobile/sdk/MonitoredMultiDexApplication = Com.Sas.Mkt.Mobile.Sdk.MonitoredMultiDexApplication
  <init>()V = .ctor()
com/sas/mkt/mobile/sdk/offline/OfflineEventManager = Com.Sas.Mkt.Mobile.Sdk.Offline.OfflineEventManager
  getInstance()Lcom/sas/mkt/mobile/sdk/offline/OfflineEventManager; = Instance
  isRunning()Z = Running
  setRunning(Z)V = Running
  handleFailure(Ljava/util/List;Ljava/lang/Exception;)V = HandleFailure(System.Collections.Generic.IList<Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent>, Java.Lang.Exception)
  handleSuccess(Ljava/util/List;)V = HandleSuccess(System.Collections.Generic.IList<Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent>)
  peek()I = Peek()
  push(Ljava/util/List;)Z = Push(System.Collections.Generic.IList<Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent>)
  run()V = Run()
  runOnce()Z = RunOnce()
  stop()V = Stop()
com/sas/mkt/mobile/sdk/SASCollector = Com.Sas.Mkt.Mobile.Sdk.SASCollector
  IDENTITY_TYPE_CUSTOMER_ID = IdentityTypeCustomerId
  IDENTITY_TYPE_EMAIL = IdentityTypeEmail
  IDENTITY_TYPE_LOGIN = IdentityTypeLogin
  TAG = Tag
  getApplicationID()Ljava/lang/String; = ApplicationID
  setApplicationID(Ljava/lang/String;)V = ApplicationID
  getApplicationVersion()Ljava/lang/String; = ApplicationVersion
  setApplicationVersion(Ljava/lang/String;)V = ApplicationVersion
  getDeviceID()Ljava/lang/String; = DeviceID
  getInstance()Lcom/sas/mkt/mobile/sdk/SASCollector; = Instance
  isInitialized()Z = IsInitialized
  getSessionBindingParameter()Ljava/lang/String; = SessionBindingParameter
  getTagServer()Ljava/lang/String; = TagServer
  setTagServer(Ljava/lang/String;)V = TagServer
  getTenantID()Ljava/lang/String; = TenantID
  setTenantID(Ljava/lang/String;)V = TenantID
  addAppEvent(Lcom/sas/mkt/mobile/sdk/SASCollectorEvent;)V = AddAppEvent(Com.Sas.Mkt.Mobile.Sdk.SASCollectorEvent)
  addAppEvent(Ljava/lang/String;Ljava/util/Map;)V = AddAppEvent(string, System.Collections.Generic.IDictionary<string, string>)
  addAppEvents(Ljava/util/List;)V = AddAppEvents(System.Collections.Generic.IList<Com.Sas.Mkt.Mobile.Sdk.SASCollectorEvent>)
  detachIdentity(Lcom/sas/mkt/mobile/sdk/SASCollector$DetachIdentityCallback;)V = DetachIdentity(Com.Sas.Mkt.Mobile.Sdk.SASCollector.IDetachIdentityCallback)
  disableLocationMonitoring()V = DisableLocationMonitoring()
  getDecoratedWebSessionURL(Ljava/lang/String;)Ljava/lang/String; = GetDecoratedWebSessionURL(string)
  handleMobileMessage(Landroid/os/Bundle;)Z = HandleMobileMessage(Android.OS.Bundle)
  handleMobileMessage(Ljava/util/Map;)Z = HandleMobileMessage(System.Collections.Generic.IDictionary<string, string>)
  identity(Ljava/lang/String;Ljava/lang/String;Lcom/sas/mkt/mobile/sdk/SASCollector$IdentityCallback;)V = Identity(string, string, Com.Sas.Mkt.Mobile.Sdk.SASCollector.IIdentityCallback)
  identity(Ljava/lang/String;Ljava/lang/String;Lcom/sas/mkt/mobile/sdk/SASCollector$IdentityCallbackWithMessage;)V = Identity(string, string, Com.Sas.Mkt.Mobile.Sdk.SASCollector.IIdentityCallbackWithMessage)
  identityWithType(Ljava/lang/String;Ljava/lang/String;)V = IdentityWithType(string, string)
  initialize(Landroid/content/Context;)V = Initialize(Android.Content.Context)
  newPage(Ljava/lang/String;)V = NewPage(string)
  onConfigurationChanged(Landroid/content/res/Configuration;)V = OnConfigurationChanged(Android.Content.Res.Configuration)
  registerForMobileMessages(Ljava/lang/String;)V = RegisterForMobileMessages(string)
  registerForMobileMessages(Ljava/lang/String;Lcom/sas/mkt/mobile/sdk/SASCollector$TokenRegistrationCallback;)V = RegisterForMobileMessages(string, Com.Sas.Mkt.Mobile.Sdk.SASCollector.ITokenRegistrationCallback)
  resetDeviceID()V = ResetDeviceID()
  setEventCallback(Lcom/sas/mkt/mobile/sdk/SASCollector$EventCallback;)V = SetEventCallback(Com.Sas.Mkt.Mobile.Sdk.SASCollector.IEventCallback)
  setGeofenceCallback(Lcom/sas/mkt/mobile/sdk/SASCollector$GeofenceCallback;)V = SetGeofenceCallback(Com.Sas.Mkt.Mobile.Sdk.SASCollector.IGeofenceCallback)
  setMobileMessagingIcon(I)V = SetMobileMessagingIcon(int)
  setMobileMessagingIconColor(I)V = SetMobileMessagingIconColor(int)
  setPushNotificationChannelId(Ljava/lang/String;)V = SetPushNotificationChannelId(string)
  shutdown()V = Shutdown()
  shutdownAndDetachIdentity(Lcom/sas/mkt/mobile/sdk/SASCollector$DetachIdentityCallback;)V = ShutdownAndDetachIdentity(Com.Sas.Mkt.Mobile.Sdk.SASCollector.IDetachIdentityCallback)
  startMonitoringLocation()V = StartMonitoringLocation()
  useLocalResources(Z)V = UseLocalResources(bool)
  useLocalResourcesForSpots(ZLjava/lang/String;)V = UseLocalResourcesForSpots(bool, string)
com/sas/mkt/mobile/sdk/SASCollectorBroadcastReceiver = Com.Sas.Mkt.Mobile.Sdk.SASCollectorBroadcastReceiver
  <init>()V = .ctor()
  ACTION_GEOFENCE_TRANSITION = ActionGeofenceTransition
  onReceive(Landroid/content/Context;Landroid/content/Intent;)V = OnReceive(Android.Content.Context, Android.Content.Intent)
com/sas/mkt/mobile/sdk/SASCollectorEvent = Com.Sas.Mkt.Mobile.Sdk.SASCollectorEvent
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/util/Map;)V = .ctor(string, System.Collections.Generic.IDictionary<string, string>)
  getAttributes()Ljava/util/Map; = Attributes
  setAttributes(Ljava/util/HashMap;)V = Attributes
  getCartItems()Ljava/util/List; = CartItems
  getEventKey()Ljava/lang/String; = EventKey
  setEventKey(Ljava/lang/String;)V = EventKey
  addAttribute(Ljava/lang/String;Ljava/lang/String;)V = AddAttribute(string, string)
  addCartItem(Ljava/util/Map;)I = AddCartItem(System.Collections.Generic.IDictionary<string, string>)
  clearCartItems()V = ClearCartItems()
  removeCartItems(I)V = RemoveCartItems(int)
com/sas/mkt/mobile/sdk/SASCollectorException = Com.Sas.Mkt.Mobile.Sdk.SASCollectorException
  <init>()V = .ctor()
com/sas/mkt/mobile/sdk/SASCollectorNotInitializedException = Com.Sas.Mkt.Mobile.Sdk.SASCollectorNotInitializedException
  <init>()V = .ctor()
com/sas/mkt/mobile/sdk/server/HttpURLConnectionFactory = Com.Sas.Mkt.Mobile.Sdk.Server.HttpURLConnectionFactory
  getInstance()Lcom/sas/mkt/mobile/sdk/server/HttpURLConnectionFactory; = Instance
  open(Ljava/net/URL;)Ljava/net/HttpURLConnection; = Open(Java.Net.URL)
com/sas/mkt/mobile/sdk/server/MidtierServices = Com.Sas.Mkt.Mobile.Sdk.Server.MidtierServices
  hasSession()Z = HasSession
  checkConnection()Z = CheckConnection()
  detachIdentity(Ljava/lang/String;Z)V = DetachIdentity(string, bool)
  get()Lcom/sas/mkt/mobile/sdk/server/MidtierServices; = Get()
  getAdRequestRedirect(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/sas/mkt/mobile/sdk/domain/AdRequestRedirect; = GetAdRequestRedirect(string, string, string)
  getGeofences(DD)Lcom/sas/mkt/mobile/sdk/domain/GeofenceContainer; = GetGeofences(double, double)
  identity(Ljava/lang/String;Lcom/sas/mkt/mobile/sdk/domain/IdentityData;)V = Identity(string, Com.Sas.Mkt.Mobile.Sdk.Domain.IdentityData)
  postEvent(Lcom/sas/mkt/mobile/sdk/domain/MobileEvent;)V = PostEvent(Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent)
  postEvents(Lcom/sas/mkt/mobile/sdk/domain/EventList;)V = PostEvents(Com.Sas.Mkt.Mobile.Sdk.Domain.EventList)
  updateToken(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = UpdateToken(string, string, string)
com/sas/mkt/mobile/sdk/server/MidtierServicesException = Com.Sas.Mkt.Mobile.Sdk.Server.MidtierServicesException
  <init>(Lcom/sas/mkt/mobile/sdk/domain/ErrorData;)V = .ctor(Com.Sas.Mkt.Mobile.Sdk.Domain.ErrorData)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
  getErrorData()Lcom/sas/mkt/mobile/sdk/domain/ErrorData; = ErrorData
  getUrl()Ljava/lang/String; = Url
  setUrl(Ljava/lang/String;)V = Url
com/sas/mkt/mobile/sdk/server/MidtierServicesFactory = Com.Sas.Mkt.Mobile.Sdk.Server.MidtierServicesFactory
  <init>()V = .ctor()
  newMidtierServices()Lcom/sas/mkt/mobile/sdk/server/MidtierServices; = NewMidtierServices()
com/sas/mkt/mobile/sdk/tasks/AdRequestRedirectTask = Com.Sas.Mkt.Mobile.Sdk.Tasks.AdRequestRedirectTask
  <init>(Ljava/lang/String;Lcom/sas/mkt/mobile/sdk/tasks/AdRequestRedirectTask$ResultHandler;)V = .ctor(string, Com.Sas.Mkt.Mobile.Sdk.Tasks.AdRequestRedirectTask.IResultHandler)
  TAG = Tag
  run()V = Run()
com/sas/mkt/mobile/sdk/tasks/BaseSASCollectorTask = Com.Sas.Mkt.Mobile.Sdk.Tasks.BaseSASCollectorTask
  <init>()V = .ctor()
  run()V = Run()
com/sas/mkt/mobile/sdk/tasks/CleanRemoteImagesTask = Com.Sas.Mkt.Mobile.Sdk.Tasks.CleanRemoteImagesTask
  <init>()V = .ctor()
  run()V = Run()
com/sas/mkt/mobile/sdk/tasks/DetachIdentity = Com.Sas.Mkt.Mobile.Sdk.Tasks.DetachIdentity
  <init>(Ljava/lang/String;ZLcom/sas/mkt/mobile/sdk/SASCollector$DetachIdentityCallback;Z)V = .ctor(string, bool, Com.Sas.Mkt.Mobile.Sdk.SASCollector.IDetachIdentityCallback, bool)
  run()V = Run()
com/sas/mkt/mobile/sdk/tasks/DownloadRemoteImageTask = Com.Sas.Mkt.Mobile.Sdk.Tasks.DownloadRemoteImageTask
  <init>(Ljava/lang/String;Lcom/sas/mkt/mobile/sdk/tasks/DownloadRemoteImageTask$Callback;)V = .ctor(string, Com.Sas.Mkt.Mobile.Sdk.Tasks.DownloadRemoteImageTask.ICallback)
  run()V = Run()
com/sas/mkt/mobile/sdk/tasks/IdentityTask = Com.Sas.Mkt.Mobile.Sdk.Tasks.IdentityTask
  <init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/sas/mkt/mobile/sdk/SASCollector$IdentityCallback;)V = .ctor(Android.Content.Context, string, string, string, Com.Sas.Mkt.Mobile.Sdk.SASCollector.IIdentityCallback)
  <init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/sas/mkt/mobile/sdk/SASCollector$IdentityCallbackWithMessage;)V = .ctor(Android.Content.Context, string, string, string, Com.Sas.Mkt.Mobile.Sdk.SASCollector.IIdentityCallbackWithMessage)
  run()V = Run()
com/sas/mkt/mobile/sdk/tasks/LoadGeofencesTask = Com.Sas.Mkt.Mobile.Sdk.Tasks.LoadGeofencesTask
  <init>(Landroid/content/Context;Landroid/location/Location;)V = .ctor(Android.Content.Context, Android.Locations.Location)
  run()V = Run()
com/sas/mkt/mobile/sdk/tasks/PersistEventsTask = Com.Sas.Mkt.Mobile.Sdk.Tasks.PersistEventsTask
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent>)
  run()V = Run()
com/sas/mkt/mobile/sdk/tasks/PostEventsTask = Com.Sas.Mkt.Mobile.Sdk.Tasks.PostEventsTask
  <init>(Lcom/sas/mkt/mobile/sdk/tasks/PostEventsTask$ResultHandler;Ljava/util/List;)V = .ctor(Com.Sas.Mkt.Mobile.Sdk.Tasks.PostEventsTask.IResultHandler, System.Collections.Generic.IList<Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent>)
  run()V = Run()
com/sas/mkt/mobile/sdk/tasks/QueueEventTask = Com.Sas.Mkt.Mobile.Sdk.Tasks.QueueEventTask
  <init>(Ljava/util/List;Lcom/sas/mkt/mobile/sdk/domain/MobileEvent$SessionIndicator;)V = .ctor(System.Collections.Generic.IList<Com.Sas.Mkt.Mobile.Sdk.SASCollectorEvent>, Com.Sas.Mkt.Mobile.Sdk.Domain.MobileEvent.SessionIndicator)
  getEvents()Ljava/util/List; = Events
  getSessionIndicator()Lcom/sas/mkt/mobile/sdk/domain/MobileEvent$SessionIndicator; = SessionIndicator
  createEvent(Lcom/sas/mkt/mobile/sdk/SASCollectorEvent;)Lcom/sas/mkt/mobile/sdk/domain/MobileEvent; = CreateEvent(Com.Sas.Mkt.Mobile.Sdk.SASCollectorEvent)
  run()V = Run()
com/sas/mkt/mobile/sdk/tasks/SASCollectorExecutor = Com.Sas.Mkt.Mobile.Sdk.Tasks.SASCollectorExecutor
  <init>()V = .ctor()
  execute(Ljava/lang/Runnable;Z)V = Execute(Java.Lang.IRunnable, bool)
  rejectedExecution(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V = RejectedExecution(Java.Lang.IRunnable, Java.Util.Concurrent.ThreadPoolExecutor)
com/sas/mkt/mobile/sdk/tasks/SecureStorageTask = Com.Sas.Mkt.Mobile.Sdk.Tasks.SecureStorageTask
  <init>(Ljava/lang/String;)V = .ctor(string)
  run()V = Run()
com/sas/mkt/mobile/sdk/tasks/UpdateToken = Com.Sas.Mkt.Mobile.Sdk.Tasks.UpdateToken
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/sas/mkt/mobile/sdk/SASCollector$TokenRegistrationCallback;)V = .ctor(string, string, string, Com.Sas.Mkt.Mobile.Sdk.SASCollector.ITokenRegistrationCallback)
  run()V = Run()
com/sas/mkt/mobile/sdk/util/AndroidXorIdProvider = Com.Sas.Mkt.Mobile.Sdk.Util.AndroidXorIdProvider
  <init>()V = .ctor()
  generateLoadId()Ljava/lang/String; = GenerateLoadId()
com/sas/mkt/mobile/sdk/util/CropImageView = Com.Sas.Mkt.Mobile.Sdk.Util.CropImageView
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
com/sas/mkt/mobile/sdk/util/ImageHandler = Com.Sas.Mkt.Mobile.Sdk.Util.ImageHandler
  <init>()V = .ctor()
  calculateInSampleSize(Landroid/graphics/BitmapFactory$Options;II)I = CalculateInSampleSize(Android.Graphics.BitmapFactory.Options, int, int)
  loadAndScaleImage(Landroid/content/Context;Ljava/lang/String;II)Landroid/graphics/Bitmap; = LoadAndScaleImage(Android.Content.Context, string, int, int)
  pixelsToDip(Landroid/content/Context;I)I = PixelsToDip(Android.Content.Context, int)
com/sas/mkt/mobile/sdk/util/SecureStorage = Com.Sas.Mkt.Mobile.Sdk.Util.SecureStorage
  TAG = Tag
  getInstance()Lcom/sas/mkt/mobile/sdk/util/SecureStorage; = Instance
  init(Ljava/lang/String;)V = Init(string)
  readSimple(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = ReadSimple(Android.Content.Context, string, string)
  removeSimple(Landroid/content/Context;Ljava/lang/String;)V = RemoveSimple(Android.Content.Context, string)
  writeSimple(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = WriteSimple(Android.Content.Context, string, string)
com/sas/mkt/mobile/sdk/util/SLog = Com.Sas.Mkt.Mobile.Sdk.Util.SLog
  <init>()V = .ctor()
  ALL = All
  DEBUG = Debug
  ERROR = Error
  INFO = Info
  NONE = None
  TAG_API = TagApi
  VERBOSE = Verbose
  WARN = Warn
  getLevel()I = Level
  setLevel(I)V = Level
  api(Ljava/lang/String;[Ljava/lang/Object;)V = Api(string, params Java.Lang.Object[])
  d(Ljava/lang/String;Ljava/lang/CharSequence;[Ljava/lang/Object;)V = D(string, Java.Lang.ICharSequence, params Java.Lang.Object[])
  dapi(Ljava/lang/String;[Ljava/lang/Object;)V = Dapi(string, params Java.Lang.Object[])
  e(Ljava/lang/String;Ljava/lang/CharSequence;[Ljava/lang/Object;)V = E(string, Java.Lang.ICharSequence, params Java.Lang.Object[])
  e(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/CharSequence;[Ljava/lang/Object;)V = E(Java.Lang.Throwable, string, Java.Lang.ICharSequence, params Java.Lang.Object[])
  fullException(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = FullException(string, string, Java.Lang.Throwable)
  i(Ljava/lang/String;Ljava/lang/CharSequence;[Ljava/lang/Object;)V = I(string, Java.Lang.ICharSequence, params Java.Lang.Object[])
  v(Ljava/lang/String;Ljava/lang/CharSequence;[Ljava/lang/Object;)V = V(string, Java.Lang.ICharSequence, params Java.Lang.Object[])
  w(Ljava/lang/String;Ljava/lang/CharSequence;[Ljava/lang/Object;)V = W(string, Java.Lang.ICharSequence, params Java.Lang.Object[])
com/sas/mkt/mobile/sdk/util/StringUtil = Com.Sas.Mkt.Mobile.Sdk.Util.StringUtil
  <init>()V = .ctor()
  isStringValid(Ljava/lang/String;)Z = IsStringValid(string)
com/sas/mkt/mobile/sdk/util/TLSSocketFactory = Com.Sas.Mkt.Mobile.Sdk.Util.TLSSocketFactory
  <init>()V = .ctor()
  createSocket(Ljava/lang/String;I)Ljava/net/Socket; = CreateSocket(string, int)
  createSocket(Ljava/lang/String;ILjava/net/InetAddress;I)Ljava/net/Socket; = CreateSocket(string, int, Java.Net.InetAddress, int)
  createSocket(Ljava/net/InetAddress;I)Ljava/net/Socket; = CreateSocket(Java.Net.InetAddress, int)
  createSocket(Ljava/net/InetAddress;ILjava/net/InetAddress;I)Ljava/net/Socket; = CreateSocket(Java.Net.InetAddress, int, Java.Net.InetAddress, int)
  createSocket(Ljava/net/Socket;Ljava/lang/String;IZ)Ljava/net/Socket; = CreateSocket(Java.Net.Socket, string, int, bool)
  getDefaultCipherSuites()[Ljava/lang/String; = GetDefaultCipherSuites()
  getSupportedCipherSuites()[Ljava/lang/String; = GetSupportedCipherSuites()
